name: Local Smoke Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    # Set environment variables for the application at the job level
    env:
      BACKEND_PORT: 8000
      # Use the GITHUB_WORKSPACE variable to create absolute paths
      FOMM_CKPT_DIR: ${{ github.workspace }}/models/fomm
      DIFF2LIP_CKPT_DIR: ${{ github.workspace }}/models/diff2lip
      SADTALKER_CKPT_DIR: ${{ github.workspace }}/models/sadtalker
      WAV2LIP_CKPT: ${{ github.workspace }}/models/wav2lip/wav2lip_gan.pth
      # Point to the correct GFPGAN version your app expects
      GFPGAN_CKPT: ${{ github.workspace }}/models/gfpgan/GFPGANv1.4.pth

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }} and venv
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üõ†Ô∏è Install core REST dependencies
        working-directory: app
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install fastapi uvicorn pydantic==2.11.1 requests \
                      torch==2.6.0 pydantic-settings==2.10.1 \
                      numpy

      # Download pretrained model checkpoints
      - name: üíæ Download model checkpoints
        run: |
          # Use the new script for CI
          bash ./scripts/download_models_ci.sh models

      - name: ‚ñ∂Ô∏è Start FastAPI REST server
        working-directory: app
        run: |
          source .venv/bin/activate
          uvicorn api:app --host 0.0.0.0 --port $BACKEND_PORT &
          echo "Waiting for REST API‚Ä¶"
          # Increased loop count for safety, in case server needs more time
          for i in {1..30}; do
            # Check for a 200 OK status on a health-check endpoint if available, otherwise use /docs
            curl -s -o /dev/null -w "%{http_code}" http://localhost:$BACKEND_PORT/docs | grep 200 && break
            sleep 1
          done

      - name: ü§ñ Test MCP stdio server
        working-directory: app
        run: |
          source .venv/bin/activate
          echo '{"tool":"render_avatar","params":{"avatar_path":"../tests/assets/alice.png","audio_path":"../tests/assets/hello.wav"}}' \
            | python mcp_server.py | jq .

      - name: üîç GET /avatars
        run: curl -sf http://localhost:$BACKEND_PORT/avatars

      - name: üß™ make check
        if: hashFiles('Makefile') != ''
        run: make check || echo "‚ÑπÔ∏è No check target‚Äîskipping."

      - name: üßπ Kill background servers
        if: always()
        run: |
          pkill -f "uvicorn"      || true
          pkill -f "mcp_server.py" || true